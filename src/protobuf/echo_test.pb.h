// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: src/protobuf/echo_test.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_src_2fprotobuf_2fecho_5ftest_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_src_2fprotobuf_2fecho_5ftest_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/message.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/port_undef.inc>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_src_2fprotobuf_2fecho_5ftest_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_src_2fprotobuf_2fecho_5ftest_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[] PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[] PROTOBUF_SECTION_VARIABLE(
      protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2] PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_src_2fprotobuf_2fecho_5ftest_2eproto;
namespace memgraph {
namespace protobuf {
class TestRequest;
class TestRequestDefaultTypeInternal;
extern TestRequestDefaultTypeInternal _TestRequest_default_instance_;
class TestResponse;
class TestResponseDefaultTypeInternal;
extern TestResponseDefaultTypeInternal _TestResponse_default_instance_;
}  // namespace protobuf
}  // namespace memgraph
PROTOBUF_NAMESPACE_OPEN
template <>
::memgraph::protobuf::TestRequest *Arena::CreateMaybeMessage<::memgraph::protobuf::TestRequest>(Arena *);
template <>
::memgraph::protobuf::TestResponse *Arena::CreateMaybeMessage<::memgraph::protobuf::TestResponse>(Arena *);
PROTOBUF_NAMESPACE_CLOSE
namespace memgraph {
namespace protobuf {

// ===================================================================

class TestRequest PROTOBUF_FINAL
    : public ::PROTOBUF_NAMESPACE_ID::
          Message /* @@protoc_insertion_point(class_definition:memgraph.protobuf.TestRequest) */ {
 public:
  inline TestRequest() : TestRequest(nullptr){};
  virtual ~TestRequest();

  TestRequest(const TestRequest &from);
  TestRequest(TestRequest &&from) noexcept : TestRequest() { *this = ::std::move(from); }

  inline TestRequest &operator=(const TestRequest &from) {
    CopyFrom(from);
    return *this;
  }
  inline TestRequest &operator=(TestRequest &&from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor *descriptor() { return GetDescriptor(); }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor *GetDescriptor() { return GetMetadataStatic().descriptor; }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection *GetReflection() { return GetMetadataStatic().reflection; }
  static const TestRequest &default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TestRequest *internal_default_instance() {
    return reinterpret_cast<const TestRequest *>(&_TestRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;

  friend void swap(TestRequest &a, TestRequest &b) { a.Swap(&b); }
  inline void Swap(TestRequest *other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestRequest *other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TestRequest *New() const final { return CreateMaybeMessage<TestRequest>(nullptr); }

  TestRequest *New(::PROTOBUF_NAMESPACE_ID::Arena *arena) const final { return CreateMaybeMessage<TestRequest>(arena); }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) final;
  void CopyFrom(const TestRequest &from);
  void MergeFrom(const TestRequest &from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char *_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8 *_InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

 private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestRequest *other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() { return "memgraph.protobuf.TestRequest"; }

 protected:
  explicit TestRequest(::PROTOBUF_NAMESPACE_ID::Arena *arena);

 private:
  static void ArenaDtor(void *object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *arena);

 public:
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

 private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_src_2fprotobuf_2fecho_5ftest_2eproto);
    return ::descriptor_table_src_2fprotobuf_2fecho_5ftest_2eproto.file_level_metadata[kIndexInFileMessages];
  }

 public:
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContentFieldNumber = 2,
    kRequestIdFieldNumber = 1,
  };
  // string content = 2;
  void clear_content();
  const std::string &content() const;
  void set_content(const std::string &value);
  void set_content(std::string &&value);
  void set_content(const char *value);
  void set_content(const char *value, size_t size);
  std::string *mutable_content();
  std::string *release_content();
  void set_allocated_content(std::string *content);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED(
      "The unsafe_arena_ accessors for"
      "    string fields are deprecated and will be removed in a"
      "    future release.")
  std::string *unsafe_arena_release_content();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED(
      "The unsafe_arena_ accessors for"
      "    string fields are deprecated and will be removed in a"
      "    future release.")
  void unsafe_arena_set_allocated_content(std::string *content);

 private:
  const std::string &_internal_content() const;
  void _internal_set_content(const std::string &value);
  std::string *_internal_mutable_content();

 public:
  // uint64 request_id = 1;
  void clear_request_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 request_id() const;
  void set_request_id(::PROTOBUF_NAMESPACE_ID::uint64 value);

 private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_request_id() const;
  void _internal_set_request_id(::PROTOBUF_NAMESPACE_ID::uint64 value);

 public:
  // @@protoc_insertion_point(class_scope:memgraph.protobuf.TestRequest)
 private:
  class _Internal;

  template <typename T>
  friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
  ::PROTOBUF_NAMESPACE_ID::uint64 request_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_src_2fprotobuf_2fecho_5ftest_2eproto;
};
// -------------------------------------------------------------------

class TestResponse PROTOBUF_FINAL
    : public ::PROTOBUF_NAMESPACE_ID::
          Message /* @@protoc_insertion_point(class_definition:memgraph.protobuf.TestResponse) */ {
 public:
  inline TestResponse() : TestResponse(nullptr){};
  virtual ~TestResponse();

  TestResponse(const TestResponse &from);
  TestResponse(TestResponse &&from) noexcept : TestResponse() { *this = ::std::move(from); }

  inline TestResponse &operator=(const TestResponse &from) {
    CopyFrom(from);
    return *this;
  }
  inline TestResponse &operator=(TestResponse &&from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor *descriptor() { return GetDescriptor(); }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor *GetDescriptor() { return GetMetadataStatic().descriptor; }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection *GetReflection() { return GetMetadataStatic().reflection; }
  static const TestResponse &default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TestResponse *internal_default_instance() {
    return reinterpret_cast<const TestResponse *>(&_TestResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;

  friend void swap(TestResponse &a, TestResponse &b) { a.Swap(&b); }
  inline void Swap(TestResponse *other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestResponse *other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TestResponse *New() const final { return CreateMaybeMessage<TestResponse>(nullptr); }

  TestResponse *New(::PROTOBUF_NAMESPACE_ID::Arena *arena) const final {
    return CreateMaybeMessage<TestResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) final;
  void CopyFrom(const TestResponse &from);
  void MergeFrom(const TestResponse &from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char *_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8 *_InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

 private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestResponse *other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() { return "memgraph.protobuf.TestResponse"; }

 protected:
  explicit TestResponse(::PROTOBUF_NAMESPACE_ID::Arena *arena);

 private:
  static void ArenaDtor(void *object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *arena);

 public:
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

 private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_src_2fprotobuf_2fecho_5ftest_2eproto);
    return ::descriptor_table_src_2fprotobuf_2fecho_5ftest_2eproto.file_level_metadata[kIndexInFileMessages];
  }

 public:
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContentFieldNumber = 2,
    kRequestIdFieldNumber = 1,
  };
  // string content = 2;
  void clear_content();
  const std::string &content() const;
  void set_content(const std::string &value);
  void set_content(std::string &&value);
  void set_content(const char *value);
  void set_content(const char *value, size_t size);
  std::string *mutable_content();
  std::string *release_content();
  void set_allocated_content(std::string *content);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED(
      "The unsafe_arena_ accessors for"
      "    string fields are deprecated and will be removed in a"
      "    future release.")
  std::string *unsafe_arena_release_content();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED(
      "The unsafe_arena_ accessors for"
      "    string fields are deprecated and will be removed in a"
      "    future release.")
  void unsafe_arena_set_allocated_content(std::string *content);

 private:
  const std::string &_internal_content() const;
  void _internal_set_content(const std::string &value);
  std::string *_internal_mutable_content();

 public:
  // uint64 request_id = 1;
  void clear_request_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 request_id() const;
  void set_request_id(::PROTOBUF_NAMESPACE_ID::uint64 value);

 private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_request_id() const;
  void _internal_set_request_id(::PROTOBUF_NAMESPACE_ID::uint64 value);

 public:
  // @@protoc_insertion_point(class_scope:memgraph.protobuf.TestResponse)
 private:
  class _Internal;

  template <typename T>
  friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
  ::PROTOBUF_NAMESPACE_ID::uint64 request_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_src_2fprotobuf_2fecho_5ftest_2eproto;
};
// ===================================================================

// ===================================================================

#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TestRequest

// uint64 request_id = 1;
inline void TestRequest::clear_request_id() { request_id_ = PROTOBUF_ULONGLONG(0); }
inline ::PROTOBUF_NAMESPACE_ID::uint64 TestRequest::_internal_request_id() const { return request_id_; }
inline ::PROTOBUF_NAMESPACE_ID::uint64 TestRequest::request_id() const {
  // @@protoc_insertion_point(field_get:memgraph.protobuf.TestRequest.request_id)
  return _internal_request_id();
}
inline void TestRequest::_internal_set_request_id(::PROTOBUF_NAMESPACE_ID::uint64 value) { request_id_ = value; }
inline void TestRequest::set_request_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_request_id(value);
  // @@protoc_insertion_point(field_set:memgraph.protobuf.TestRequest.request_id)
}

// string content = 2;
inline void TestRequest::clear_content() {
  content_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string &TestRequest::content() const {
  // @@protoc_insertion_point(field_get:memgraph.protobuf.TestRequest.content)
  return _internal_content();
}
inline void TestRequest::set_content(const std::string &value) {
  _internal_set_content(value);
  // @@protoc_insertion_point(field_set:memgraph.protobuf.TestRequest.content)
}
inline std::string *TestRequest::mutable_content() {
  // @@protoc_insertion_point(field_mutable:memgraph.protobuf.TestRequest.content)
  return _internal_mutable_content();
}
inline const std::string &TestRequest::_internal_content() const { return content_.Get(); }
inline void TestRequest::_internal_set_content(const std::string &value) {
  content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TestRequest::set_content(std::string &&value) {
  content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:memgraph.protobuf.TestRequest.content)
}
inline void TestRequest::set_content(const char *value) {
  GOOGLE_DCHECK(value != nullptr);

  content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:memgraph.protobuf.TestRequest.content)
}
inline void TestRequest::set_content(const char *value, size_t size) {
  content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
               ::std::string(reinterpret_cast<const char *>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:memgraph.protobuf.TestRequest.content)
}
inline std::string *TestRequest::_internal_mutable_content() {
  return content_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string *TestRequest::release_content() {
  // @@protoc_insertion_point(field_release:memgraph.protobuf.TestRequest.content)
  return content_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TestRequest::set_allocated_content(std::string *content) {
  if (content != nullptr) {
  } else {
  }
  content_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), content, GetArena());
  // @@protoc_insertion_point(field_set_allocated:memgraph.protobuf.TestRequest.content)
}
inline std::string *TestRequest::unsafe_arena_release_content() {
  // @@protoc_insertion_point(field_unsafe_arena_release:memgraph.protobuf.TestRequest.content)
  GOOGLE_DCHECK(GetArena() != nullptr);

  return content_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TestRequest::unsafe_arena_set_allocated_content(std::string *content) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (content != nullptr) {
  } else {
  }
  content_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), content,
                                   GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:memgraph.protobuf.TestRequest.content)
}

// -------------------------------------------------------------------

// TestResponse

// uint64 request_id = 1;
inline void TestResponse::clear_request_id() { request_id_ = PROTOBUF_ULONGLONG(0); }
inline ::PROTOBUF_NAMESPACE_ID::uint64 TestResponse::_internal_request_id() const { return request_id_; }
inline ::PROTOBUF_NAMESPACE_ID::uint64 TestResponse::request_id() const {
  // @@protoc_insertion_point(field_get:memgraph.protobuf.TestResponse.request_id)
  return _internal_request_id();
}
inline void TestResponse::_internal_set_request_id(::PROTOBUF_NAMESPACE_ID::uint64 value) { request_id_ = value; }
inline void TestResponse::set_request_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_request_id(value);
  // @@protoc_insertion_point(field_set:memgraph.protobuf.TestResponse.request_id)
}

// string content = 2;
inline void TestResponse::clear_content() {
  content_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string &TestResponse::content() const {
  // @@protoc_insertion_point(field_get:memgraph.protobuf.TestResponse.content)
  return _internal_content();
}
inline void TestResponse::set_content(const std::string &value) {
  _internal_set_content(value);
  // @@protoc_insertion_point(field_set:memgraph.protobuf.TestResponse.content)
}
inline std::string *TestResponse::mutable_content() {
  // @@protoc_insertion_point(field_mutable:memgraph.protobuf.TestResponse.content)
  return _internal_mutable_content();
}
inline const std::string &TestResponse::_internal_content() const { return content_.Get(); }
inline void TestResponse::_internal_set_content(const std::string &value) {
  content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TestResponse::set_content(std::string &&value) {
  content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:memgraph.protobuf.TestResponse.content)
}
inline void TestResponse::set_content(const char *value) {
  GOOGLE_DCHECK(value != nullptr);

  content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:memgraph.protobuf.TestResponse.content)
}
inline void TestResponse::set_content(const char *value, size_t size) {
  content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
               ::std::string(reinterpret_cast<const char *>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:memgraph.protobuf.TestResponse.content)
}
inline std::string *TestResponse::_internal_mutable_content() {
  return content_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string *TestResponse::release_content() {
  // @@protoc_insertion_point(field_release:memgraph.protobuf.TestResponse.content)
  return content_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TestResponse::set_allocated_content(std::string *content) {
  if (content != nullptr) {
  } else {
  }
  content_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), content, GetArena());
  // @@protoc_insertion_point(field_set_allocated:memgraph.protobuf.TestResponse.content)
}
inline std::string *TestResponse::unsafe_arena_release_content() {
  // @@protoc_insertion_point(field_unsafe_arena_release:memgraph.protobuf.TestResponse.content)
  GOOGLE_DCHECK(GetArena() != nullptr);

  return content_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TestResponse::unsafe_arena_set_allocated_content(std::string *content) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (content != nullptr) {
  } else {
  }
  content_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), content,
                                   GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:memgraph.protobuf.TestResponse.content)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf
}  // namespace memgraph

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_src_2fprotobuf_2fecho_5ftest_2eproto
