// clang-format off
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: src/protobuf/messages.proto

#pragma once

#ifndef GOOGLE_PROTOBUF_INCLUDED_src_2fprotobuf_2fmessages_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_src_2fprotobuf_2fmessages_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_src_2fprotobuf_2fmessages_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_src_2fprotobuf_2fmessages_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_src_2fprotobuf_2fmessages_2eproto;
namespace memgraph {
namespace protobuf {
class Address;
class AddressDefaultTypeInternal;
extern AddressDefaultTypeInternal _Address_default_instance_;
class TestRequest;
class TestRequestDefaultTypeInternal;
extern TestRequestDefaultTypeInternal _TestRequest_default_instance_;
class UberMessage;
class UberMessageDefaultTypeInternal;
extern UberMessageDefaultTypeInternal _UberMessage_default_instance_;
}  // namespace protobuf
}  // namespace memgraph
PROTOBUF_NAMESPACE_OPEN
template<> ::memgraph::protobuf::Address* Arena::CreateMaybeMessage<::memgraph::protobuf::Address>(Arena*);
template<> ::memgraph::protobuf::TestRequest* Arena::CreateMaybeMessage<::memgraph::protobuf::TestRequest>(Arena*);
template<> ::memgraph::protobuf::UberMessage* Arena::CreateMaybeMessage<::memgraph::protobuf::UberMessage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace memgraph {
namespace protobuf {

// ===================================================================

class Address PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:memgraph.protobuf.Address) */ {
 public:
  inline Address() : Address(nullptr) {};
  virtual ~Address();

  Address(const Address& from);
  Address(Address&& from) noexcept
    : Address() {
    *this = ::std::move(from);
  }

  inline Address& operator=(const Address& from) {
    CopyFrom(from);
    return *this;
  }
  inline Address& operator=(Address&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Address& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Address* internal_default_instance() {
    return reinterpret_cast<const Address*>(
               &_Address_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Address& a, Address& b) {
    a.Swap(&b);
  }
  inline void Swap(Address* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Address* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Address* New() const final {
    return CreateMaybeMessage<Address>(nullptr);
  }

  Address* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Address>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Address& from);
  void MergeFrom(const Address& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Address* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "memgraph.protobuf.Address";
  }
  protected:
  explicit Address(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_src_2fprotobuf_2fmessages_2eproto);
    return ::descriptor_table_src_2fprotobuf_2fmessages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUniqueIdFieldNumber = 1,
    kLastKnownIpFieldNumber = 2,
    kLastKnownPortFieldNumber = 3,
  };
  // bytes unique_id = 1;
  void clear_unique_id();
  const std::string& unique_id() const;
  void set_unique_id(const std::string& value);
  void set_unique_id(std::string&& value);
  void set_unique_id(const char* value);
  void set_unique_id(const void* value, size_t size);
  std::string* mutable_unique_id();
  std::string* release_unique_id();
  void set_allocated_unique_id(std::string* unique_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_unique_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_unique_id(
      std::string* unique_id);
  private:
  const std::string& _internal_unique_id() const;
  void _internal_set_unique_id(const std::string& value);
  std::string* _internal_mutable_unique_id();
  public:

  // bytes last_known_ip = 2;
  void clear_last_known_ip();
  const std::string& last_known_ip() const;
  void set_last_known_ip(const std::string& value);
  void set_last_known_ip(std::string&& value);
  void set_last_known_ip(const char* value);
  void set_last_known_ip(const void* value, size_t size);
  std::string* mutable_last_known_ip();
  std::string* release_last_known_ip();
  void set_allocated_last_known_ip(std::string* last_known_ip);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_last_known_ip();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_last_known_ip(
      std::string* last_known_ip);
  private:
  const std::string& _internal_last_known_ip() const;
  void _internal_set_last_known_ip(const std::string& value);
  std::string* _internal_mutable_last_known_ip();
  public:

  // uint32 last_known_port = 3;
  void clear_last_known_port();
  ::PROTOBUF_NAMESPACE_ID::uint32 last_known_port() const;
  void set_last_known_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_last_known_port() const;
  void _internal_set_last_known_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:memgraph.protobuf.Address)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr unique_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr last_known_ip_;
  ::PROTOBUF_NAMESPACE_ID::uint32 last_known_port_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_src_2fprotobuf_2fmessages_2eproto;
};
// -------------------------------------------------------------------

class TestRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:memgraph.protobuf.TestRequest) */ {
 public:
  inline TestRequest() : TestRequest(nullptr) {};
  virtual ~TestRequest();

  TestRequest(const TestRequest& from);
  TestRequest(TestRequest&& from) noexcept
    : TestRequest() {
    *this = ::std::move(from);
  }

  inline TestRequest& operator=(const TestRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestRequest& operator=(TestRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TestRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TestRequest* internal_default_instance() {
    return reinterpret_cast<const TestRequest*>(
               &_TestRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TestRequest& a, TestRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(TestRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TestRequest* New() const final {
    return CreateMaybeMessage<TestRequest>(nullptr);
  }

  TestRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TestRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TestRequest& from);
  void MergeFrom(const TestRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "memgraph.protobuf.TestRequest";
  }
  protected:
  explicit TestRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_src_2fprotobuf_2fmessages_2eproto);
    return ::descriptor_table_src_2fprotobuf_2fmessages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContentFieldNumber = 2,
    kRequestIdFieldNumber = 1,
  };
  // string content = 2;
  void clear_content();
  const std::string& content() const;
  void set_content(const std::string& value);
  void set_content(std::string&& value);
  void set_content(const char* value);
  void set_content(const char* value, size_t size);
  std::string* mutable_content();
  std::string* release_content();
  void set_allocated_content(std::string* content);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_content();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_content(
      std::string* content);
  private:
  const std::string& _internal_content() const;
  void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // uint64 request_id = 1;
  void clear_request_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 request_id() const;
  void set_request_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_request_id() const;
  void _internal_set_request_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:memgraph.protobuf.TestRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
  ::PROTOBUF_NAMESPACE_ID::uint64 request_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_src_2fprotobuf_2fmessages_2eproto;
};
// -------------------------------------------------------------------

class UberMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:memgraph.protobuf.UberMessage) */ {
 public:
  inline UberMessage() : UberMessage(nullptr) {};
  virtual ~UberMessage();

  UberMessage(const UberMessage& from);
  UberMessage(UberMessage&& from) noexcept
    : UberMessage() {
    *this = ::std::move(from);
  }

  inline UberMessage& operator=(const UberMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline UberMessage& operator=(UberMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UberMessage& default_instance();

  enum SpecificMessageCase {
    kTestRequest = 4,
    SPECIFIC_MESSAGE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UberMessage* internal_default_instance() {
    return reinterpret_cast<const UberMessage*>(
               &_UberMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(UberMessage& a, UberMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(UberMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UberMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UberMessage* New() const final {
    return CreateMaybeMessage<UberMessage>(nullptr);
  }

  UberMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UberMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UberMessage& from);
  void MergeFrom(const UberMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UberMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "memgraph.protobuf.UberMessage";
  }
  protected:
  explicit UberMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_src_2fprotobuf_2fmessages_2eproto);
    return ::descriptor_table_src_2fprotobuf_2fmessages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kToAddressFieldNumber = 2,
    kFromAddressFieldNumber = 3,
    kRequestIdFieldNumber = 1,
    kTestRequestFieldNumber = 4,
  };
  // .memgraph.protobuf.Address to_address = 2;
  bool has_to_address() const;
  private:
  bool _internal_has_to_address() const;
  public:
  void clear_to_address();
  const ::memgraph::protobuf::Address& to_address() const;
  ::memgraph::protobuf::Address* release_to_address();
  ::memgraph::protobuf::Address* mutable_to_address();
  void set_allocated_to_address(::memgraph::protobuf::Address* to_address);
  private:
  const ::memgraph::protobuf::Address& _internal_to_address() const;
  ::memgraph::protobuf::Address* _internal_mutable_to_address();
  public:
  void unsafe_arena_set_allocated_to_address(
      ::memgraph::protobuf::Address* to_address);
  ::memgraph::protobuf::Address* unsafe_arena_release_to_address();

  // .memgraph.protobuf.Address from_address = 3;
  bool has_from_address() const;
  private:
  bool _internal_has_from_address() const;
  public:
  void clear_from_address();
  const ::memgraph::protobuf::Address& from_address() const;
  ::memgraph::protobuf::Address* release_from_address();
  ::memgraph::protobuf::Address* mutable_from_address();
  void set_allocated_from_address(::memgraph::protobuf::Address* from_address);
  private:
  const ::memgraph::protobuf::Address& _internal_from_address() const;
  ::memgraph::protobuf::Address* _internal_mutable_from_address();
  public:
  void unsafe_arena_set_allocated_from_address(
      ::memgraph::protobuf::Address* from_address);
  ::memgraph::protobuf::Address* unsafe_arena_release_from_address();

  // uint64 request_id = 1;
  void clear_request_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 request_id() const;
  void set_request_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_request_id() const;
  void _internal_set_request_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .memgraph.protobuf.TestRequest test_request = 4;
  bool has_test_request() const;
  private:
  bool _internal_has_test_request() const;
  public:
  void clear_test_request();
  const ::memgraph::protobuf::TestRequest& test_request() const;
  ::memgraph::protobuf::TestRequest* release_test_request();
  ::memgraph::protobuf::TestRequest* mutable_test_request();
  void set_allocated_test_request(::memgraph::protobuf::TestRequest* test_request);
  private:
  const ::memgraph::protobuf::TestRequest& _internal_test_request() const;
  ::memgraph::protobuf::TestRequest* _internal_mutable_test_request();
  public:
  void unsafe_arena_set_allocated_test_request(
      ::memgraph::protobuf::TestRequest* test_request);
  ::memgraph::protobuf::TestRequest* unsafe_arena_release_test_request();

  void clear_specific_message();
  SpecificMessageCase specific_message_case() const;
  // @@protoc_insertion_point(class_scope:memgraph.protobuf.UberMessage)
 private:
  class _Internal;
  void set_has_test_request();

  inline bool has_specific_message() const;
  inline void clear_has_specific_message();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::memgraph::protobuf::Address* to_address_;
  ::memgraph::protobuf::Address* from_address_;
  ::PROTOBUF_NAMESPACE_ID::uint64 request_id_;
  union SpecificMessageUnion {
    SpecificMessageUnion() {}
    ::memgraph::protobuf::TestRequest* test_request_;
  } specific_message_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_src_2fprotobuf_2fmessages_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Address

// bytes unique_id = 1;
inline void Address::clear_unique_id() {
  unique_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Address::unique_id() const {
  // @@protoc_insertion_point(field_get:memgraph.protobuf.Address.unique_id)
  return _internal_unique_id();
}
inline void Address::set_unique_id(const std::string& value) {
  _internal_set_unique_id(value);
  // @@protoc_insertion_point(field_set:memgraph.protobuf.Address.unique_id)
}
inline std::string* Address::mutable_unique_id() {
  // @@protoc_insertion_point(field_mutable:memgraph.protobuf.Address.unique_id)
  return _internal_mutable_unique_id();
}
inline const std::string& Address::_internal_unique_id() const {
  return unique_id_.Get();
}
inline void Address::_internal_set_unique_id(const std::string& value) {

  unique_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Address::set_unique_id(std::string&& value) {

  unique_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:memgraph.protobuf.Address.unique_id)
}
inline void Address::set_unique_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  unique_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:memgraph.protobuf.Address.unique_id)
}
inline void Address::set_unique_id(const void* value,
    size_t size) {

  unique_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:memgraph.protobuf.Address.unique_id)
}
inline std::string* Address::_internal_mutable_unique_id() {

  return unique_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Address::release_unique_id() {
  // @@protoc_insertion_point(field_release:memgraph.protobuf.Address.unique_id)
  return unique_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Address::set_allocated_unique_id(std::string* unique_id) {
  if (unique_id != nullptr) {

  } else {

  }
  unique_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), unique_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:memgraph.protobuf.Address.unique_id)
}
inline std::string* Address::unsafe_arena_release_unique_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:memgraph.protobuf.Address.unique_id)
  GOOGLE_DCHECK(GetArena() != nullptr);

  return unique_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Address::unsafe_arena_set_allocated_unique_id(
    std::string* unique_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (unique_id != nullptr) {

  } else {

  }
  unique_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      unique_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:memgraph.protobuf.Address.unique_id)
}

// bytes last_known_ip = 2;
inline void Address::clear_last_known_ip() {
  last_known_ip_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Address::last_known_ip() const {
  // @@protoc_insertion_point(field_get:memgraph.protobuf.Address.last_known_ip)
  return _internal_last_known_ip();
}
inline void Address::set_last_known_ip(const std::string& value) {
  _internal_set_last_known_ip(value);
  // @@protoc_insertion_point(field_set:memgraph.protobuf.Address.last_known_ip)
}
inline std::string* Address::mutable_last_known_ip() {
  // @@protoc_insertion_point(field_mutable:memgraph.protobuf.Address.last_known_ip)
  return _internal_mutable_last_known_ip();
}
inline const std::string& Address::_internal_last_known_ip() const {
  return last_known_ip_.Get();
}
inline void Address::_internal_set_last_known_ip(const std::string& value) {

  last_known_ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Address::set_last_known_ip(std::string&& value) {

  last_known_ip_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:memgraph.protobuf.Address.last_known_ip)
}
inline void Address::set_last_known_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  last_known_ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:memgraph.protobuf.Address.last_known_ip)
}
inline void Address::set_last_known_ip(const void* value,
    size_t size) {

  last_known_ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:memgraph.protobuf.Address.last_known_ip)
}
inline std::string* Address::_internal_mutable_last_known_ip() {

  return last_known_ip_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Address::release_last_known_ip() {
  // @@protoc_insertion_point(field_release:memgraph.protobuf.Address.last_known_ip)
  return last_known_ip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Address::set_allocated_last_known_ip(std::string* last_known_ip) {
  if (last_known_ip != nullptr) {

  } else {

  }
  last_known_ip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), last_known_ip,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:memgraph.protobuf.Address.last_known_ip)
}
inline std::string* Address::unsafe_arena_release_last_known_ip() {
  // @@protoc_insertion_point(field_unsafe_arena_release:memgraph.protobuf.Address.last_known_ip)
  GOOGLE_DCHECK(GetArena() != nullptr);

  return last_known_ip_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Address::unsafe_arena_set_allocated_last_known_ip(
    std::string* last_known_ip) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (last_known_ip != nullptr) {

  } else {

  }
  last_known_ip_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      last_known_ip, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:memgraph.protobuf.Address.last_known_ip)
}

// uint32 last_known_port = 3;
inline void Address::clear_last_known_port() {
  last_known_port_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Address::_internal_last_known_port() const {
  return last_known_port_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Address::last_known_port() const {
  // @@protoc_insertion_point(field_get:memgraph.protobuf.Address.last_known_port)
  return _internal_last_known_port();
}
inline void Address::_internal_set_last_known_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {

  last_known_port_ = value;
}
inline void Address::set_last_known_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_last_known_port(value);
  // @@protoc_insertion_point(field_set:memgraph.protobuf.Address.last_known_port)
}

// -------------------------------------------------------------------

// TestRequest

// uint64 request_id = 1;
inline void TestRequest::clear_request_id() {
  request_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TestRequest::_internal_request_id() const {
  return request_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TestRequest::request_id() const {
  // @@protoc_insertion_point(field_get:memgraph.protobuf.TestRequest.request_id)
  return _internal_request_id();
}
inline void TestRequest::_internal_set_request_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  request_id_ = value;
}
inline void TestRequest::set_request_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_request_id(value);
  // @@protoc_insertion_point(field_set:memgraph.protobuf.TestRequest.request_id)
}

// string content = 2;
inline void TestRequest::clear_content() {
  content_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TestRequest::content() const {
  // @@protoc_insertion_point(field_get:memgraph.protobuf.TestRequest.content)
  return _internal_content();
}
inline void TestRequest::set_content(const std::string& value) {
  _internal_set_content(value);
  // @@protoc_insertion_point(field_set:memgraph.protobuf.TestRequest.content)
}
inline std::string* TestRequest::mutable_content() {
  // @@protoc_insertion_point(field_mutable:memgraph.protobuf.TestRequest.content)
  return _internal_mutable_content();
}
inline const std::string& TestRequest::_internal_content() const {
  return content_.Get();
}
inline void TestRequest::_internal_set_content(const std::string& value) {

  content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TestRequest::set_content(std::string&& value) {

  content_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:memgraph.protobuf.TestRequest.content)
}
inline void TestRequest::set_content(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:memgraph.protobuf.TestRequest.content)
}
inline void TestRequest::set_content(const char* value,
    size_t size) {

  content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:memgraph.protobuf.TestRequest.content)
}
inline std::string* TestRequest::_internal_mutable_content() {

  return content_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TestRequest::release_content() {
  // @@protoc_insertion_point(field_release:memgraph.protobuf.TestRequest.content)
  return content_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TestRequest::set_allocated_content(std::string* content) {
  if (content != nullptr) {

  } else {

  }
  content_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), content,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:memgraph.protobuf.TestRequest.content)
}
inline std::string* TestRequest::unsafe_arena_release_content() {
  // @@protoc_insertion_point(field_unsafe_arena_release:memgraph.protobuf.TestRequest.content)
  GOOGLE_DCHECK(GetArena() != nullptr);

  return content_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void TestRequest::unsafe_arena_set_allocated_content(
    std::string* content) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (content != nullptr) {

  } else {

  }
  content_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      content, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:memgraph.protobuf.TestRequest.content)
}

// -------------------------------------------------------------------

// UberMessage

// uint64 request_id = 1;
inline void UberMessage::clear_request_id() {
  request_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UberMessage::_internal_request_id() const {
  return request_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UberMessage::request_id() const {
  // @@protoc_insertion_point(field_get:memgraph.protobuf.UberMessage.request_id)
  return _internal_request_id();
}
inline void UberMessage::_internal_set_request_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  request_id_ = value;
}
inline void UberMessage::set_request_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_request_id(value);
  // @@protoc_insertion_point(field_set:memgraph.protobuf.UberMessage.request_id)
}

// .memgraph.protobuf.Address to_address = 2;
inline bool UberMessage::_internal_has_to_address() const {
  return this != internal_default_instance() && to_address_ != nullptr;
}
inline bool UberMessage::has_to_address() const {
  return _internal_has_to_address();
}
inline void UberMessage::clear_to_address() {
  if (GetArena() == nullptr && to_address_ != nullptr) {
    delete to_address_;
  }
  to_address_ = nullptr;
}
inline const ::memgraph::protobuf::Address& UberMessage::_internal_to_address() const {
  const ::memgraph::protobuf::Address* p = to_address_;
  return p != nullptr ? *p : *reinterpret_cast<const ::memgraph::protobuf::Address*>(
      &::memgraph::protobuf::_Address_default_instance_);
}
inline const ::memgraph::protobuf::Address& UberMessage::to_address() const {
  // @@protoc_insertion_point(field_get:memgraph.protobuf.UberMessage.to_address)
  return _internal_to_address();
}
inline void UberMessage::unsafe_arena_set_allocated_to_address(
    ::memgraph::protobuf::Address* to_address) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(to_address_);
  }
  to_address_ = to_address;
  if (to_address) {

  } else {

  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:memgraph.protobuf.UberMessage.to_address)
}
inline ::memgraph::protobuf::Address* UberMessage::release_to_address() {
  auto temp = unsafe_arena_release_to_address();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::memgraph::protobuf::Address* UberMessage::unsafe_arena_release_to_address() {
  // @@protoc_insertion_point(field_release:memgraph.protobuf.UberMessage.to_address)

  ::memgraph::protobuf::Address* temp = to_address_;
  to_address_ = nullptr;
  return temp;
}
inline ::memgraph::protobuf::Address* UberMessage::_internal_mutable_to_address() {

  if (to_address_ == nullptr) {
    auto* p = CreateMaybeMessage<::memgraph::protobuf::Address>(GetArena());
    to_address_ = p;
  }
  return to_address_;
}
inline ::memgraph::protobuf::Address* UberMessage::mutable_to_address() {
  // @@protoc_insertion_point(field_mutable:memgraph.protobuf.UberMessage.to_address)
  return _internal_mutable_to_address();
}
inline void UberMessage::set_allocated_to_address(::memgraph::protobuf::Address* to_address) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete to_address_;
  }
  if (to_address) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(to_address);
    if (message_arena != submessage_arena) {
      to_address = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, to_address, submessage_arena);
    }

  } else {

  }
  to_address_ = to_address;
  // @@protoc_insertion_point(field_set_allocated:memgraph.protobuf.UberMessage.to_address)
}

// .memgraph.protobuf.Address from_address = 3;
inline bool UberMessage::_internal_has_from_address() const {
  return this != internal_default_instance() && from_address_ != nullptr;
}
inline bool UberMessage::has_from_address() const {
  return _internal_has_from_address();
}
inline void UberMessage::clear_from_address() {
  if (GetArena() == nullptr && from_address_ != nullptr) {
    delete from_address_;
  }
  from_address_ = nullptr;
}
inline const ::memgraph::protobuf::Address& UberMessage::_internal_from_address() const {
  const ::memgraph::protobuf::Address* p = from_address_;
  return p != nullptr ? *p : *reinterpret_cast<const ::memgraph::protobuf::Address*>(
      &::memgraph::protobuf::_Address_default_instance_);
}
inline const ::memgraph::protobuf::Address& UberMessage::from_address() const {
  // @@protoc_insertion_point(field_get:memgraph.protobuf.UberMessage.from_address)
  return _internal_from_address();
}
inline void UberMessage::unsafe_arena_set_allocated_from_address(
    ::memgraph::protobuf::Address* from_address) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(from_address_);
  }
  from_address_ = from_address;
  if (from_address) {

  } else {

  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:memgraph.protobuf.UberMessage.from_address)
}
inline ::memgraph::protobuf::Address* UberMessage::release_from_address() {
  auto temp = unsafe_arena_release_from_address();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::memgraph::protobuf::Address* UberMessage::unsafe_arena_release_from_address() {
  // @@protoc_insertion_point(field_release:memgraph.protobuf.UberMessage.from_address)

  ::memgraph::protobuf::Address* temp = from_address_;
  from_address_ = nullptr;
  return temp;
}
inline ::memgraph::protobuf::Address* UberMessage::_internal_mutable_from_address() {

  if (from_address_ == nullptr) {
    auto* p = CreateMaybeMessage<::memgraph::protobuf::Address>(GetArena());
    from_address_ = p;
  }
  return from_address_;
}
inline ::memgraph::protobuf::Address* UberMessage::mutable_from_address() {
  // @@protoc_insertion_point(field_mutable:memgraph.protobuf.UberMessage.from_address)
  return _internal_mutable_from_address();
}
inline void UberMessage::set_allocated_from_address(::memgraph::protobuf::Address* from_address) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete from_address_;
  }
  if (from_address) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(from_address);
    if (message_arena != submessage_arena) {
      from_address = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, from_address, submessage_arena);
    }

  } else {

  }
  from_address_ = from_address;
  // @@protoc_insertion_point(field_set_allocated:memgraph.protobuf.UberMessage.from_address)
}

// .memgraph.protobuf.TestRequest test_request = 4;
inline bool UberMessage::_internal_has_test_request() const {
  return specific_message_case() == kTestRequest;
}
inline bool UberMessage::has_test_request() const {
  return _internal_has_test_request();
}
inline void UberMessage::set_has_test_request() {
  _oneof_case_[0] = kTestRequest;
}
inline void UberMessage::clear_test_request() {
  if (_internal_has_test_request()) {
    if (GetArena() == nullptr) {
      delete specific_message_.test_request_;
    }
    clear_has_specific_message();
  }
}
inline ::memgraph::protobuf::TestRequest* UberMessage::release_test_request() {
  // @@protoc_insertion_point(field_release:memgraph.protobuf.UberMessage.test_request)
  if (_internal_has_test_request()) {
    clear_has_specific_message();
      ::memgraph::protobuf::TestRequest* temp = specific_message_.test_request_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    specific_message_.test_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::memgraph::protobuf::TestRequest& UberMessage::_internal_test_request() const {
  return _internal_has_test_request()
      ? *specific_message_.test_request_
      : *reinterpret_cast< ::memgraph::protobuf::TestRequest*>(&::memgraph::protobuf::_TestRequest_default_instance_);
}
inline const ::memgraph::protobuf::TestRequest& UberMessage::test_request() const {
  // @@protoc_insertion_point(field_get:memgraph.protobuf.UberMessage.test_request)
  return _internal_test_request();
}
inline ::memgraph::protobuf::TestRequest* UberMessage::unsafe_arena_release_test_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:memgraph.protobuf.UberMessage.test_request)
  if (_internal_has_test_request()) {
    clear_has_specific_message();
    ::memgraph::protobuf::TestRequest* temp = specific_message_.test_request_;
    specific_message_.test_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void UberMessage::unsafe_arena_set_allocated_test_request(::memgraph::protobuf::TestRequest* test_request) {
  clear_specific_message();
  if (test_request) {
    set_has_test_request();
    specific_message_.test_request_ = test_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:memgraph.protobuf.UberMessage.test_request)
}
inline ::memgraph::protobuf::TestRequest* UberMessage::_internal_mutable_test_request() {
  if (!_internal_has_test_request()) {
    clear_specific_message();
    set_has_test_request();
    specific_message_.test_request_ = CreateMaybeMessage< ::memgraph::protobuf::TestRequest >(GetArena());
  }
  return specific_message_.test_request_;
}
inline ::memgraph::protobuf::TestRequest* UberMessage::mutable_test_request() {
  // @@protoc_insertion_point(field_mutable:memgraph.protobuf.UberMessage.test_request)
  return _internal_mutable_test_request();
}

inline bool UberMessage::has_specific_message() const {
  return specific_message_case() != SPECIFIC_MESSAGE_NOT_SET;
}
inline void UberMessage::clear_has_specific_message() {
  _oneof_case_[0] = SPECIFIC_MESSAGE_NOT_SET;
}
inline UberMessage::SpecificMessageCase UberMessage::specific_message_case() const {
  return UberMessage::SpecificMessageCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf
}  // namespace memgraph

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_src_2fprotobuf_2fmessages_2eproto
